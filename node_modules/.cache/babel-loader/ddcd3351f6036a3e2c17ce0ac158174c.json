{"ast":null,"code":"var _jsxFileName = \"/Users/coderlust/Downloads/56d85abe-4a5e-4329-ad3a-cd6e01e2ddb4/src/components/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n  // Set default values for HTML, CSS, and JS\n  const [html, setHtml] = useLocalStorage(\"html\", `<div class=\"dss-alert dss-alert-informative\">\n    <div class=\"dss-alert-icon\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" color=\"#171717\">\n        <rect x=\"4.75\" y=\"4.75\" width=\"14.3581\" height=\"14.3581\" stroke=\"#171717\" stroke-width=\"1.5\"></rect>\n        <path d=\"M5.5 5.5L18.3615 18.3615\" stroke=\"#171717\" stroke-width=\"1.5\"></path>\n        <path d=\"M18.3563 5.5L5.5 18.3563\" stroke=\"#171717\" stroke-width=\"1.5\"></path>\n      </svg>\n    </div>\n    <div class=\"dss-alert-msg-container dis-ml-4 dss-alert-action-footer\">\n      <h6 class=\"dss-alert-msg dss-heading-xs\">Informative</h6>\n      <p class=\"dss-body-strong-sm-medium dss-alert-msg \">This is an info alert. It also has longer text to see what these alerts can look like when broken into multiple lines. This one will definitely break into multiple lines in most standard screen resolutions.</p>\n    </div>\n    <div class=\"d-flex dss-alert-btn-group\">\n      <button class=\"dss-btn dss-btn-primary dss-btn-sm \" type=\"button\">Button</button>\n      <button class=\"dss-btn dss-btn-outlined dss-btn-sm \" type=\"button\">Button</button>\n    </div>\n    <span class=\"dss-alert-close-icon\">\n      <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6.66484 1.33667L1.33855 6.6612\" stroke=\"#434343\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path>\n        <path d=\"M6.66666 6.66671L1.33333 1.33337\" stroke=\"#434343\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path>\n      </svg>\n    </span>\n  </div>`);\n  const [css, setCss] = useLocalStorage(\"css\", \"h1 { color: red; }\");\n  const [js, setJs] = useLocalStorage(\"js\", \"console.log('Hello, world!');\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `);\n    }, 250);\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pane top-pane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    language: \"xml\",\n    displayName: \"HTML\",\n    value: html,\n    onChange: setHtml,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Editor, {\n    language: \"css\",\n    displayName: \"CSS\",\n    value: css,\n    onChange: setCss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Editor, {\n    language: \"javascript\",\n    displayName: \"JS\",\n    value: js,\n    onChange: setJs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"iframe\", {\n    srcDoc: srcDoc,\n    title: \"output\",\n    sandbox: \"allow-scripts\",\n    frameBorder: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/coderlust/Downloads/56d85abe-4a5e-4329-ad3a-cd6e01e2ddb4/src/components/App.js"],"names":["React","useEffect","useState","useLocalStorage","Editor","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,eAAe,CACrC,MADqC,EAEpC;;;;;;;;;;;;;;;;;;;;;;SAFoC,CAAvC;AA0BA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,eAAe,CAAC,KAAD,EAAQ,oBAAR,CAArC;AACA,QAAM,CAACO,EAAD,EAAKC,KAAL,IAAcR,eAAe,CAAC,IAAD,EAAO,+BAAP,CAAnC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,SAAS,CAAE;;kBAECP,IAAK;mBACJE,GAAI;oBACHE,EAAG;;OAJR,CAAT;AAOD,KARyB,EAQvB,GARuB,CAA1B;AASA,WAAO,MAAMM,YAAY,CAACF,OAAD,CAAzB;AACD,GAXQ,EAWN,CAACR,IAAD,EAAOE,GAAP,EAAYE,EAAZ,CAXM,CAAT;AAaA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAC,KADX;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,KAAK,EAAEJ,IAHT;AAIE,IAAA,QAAQ,EAAEC,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAC,KADX;AAEE,IAAA,WAAW,EAAC,KAFd;AAGE,IAAA,KAAK,EAAEC,GAHT;AAIE,IAAA,QAAQ,EAAEC,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAC,YADX;AAEE,IAAA,WAAW,EAAC,IAFd;AAGE,IAAA,KAAK,EAAEC,EAHT;AAIE,IAAA,QAAQ,EAAEC,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF,eAqBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,MAAM,EAAEC,MADV;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,OAAO,EAAC,eAHV;AAIE,IAAA,WAAW,EAAC,GAJd;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,MAAM,EAAC,MANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArBF,CADF;AAkCD;;AAED,eAAeP,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n  // Set default values for HTML, CSS, and JS\n  const [html, setHtml] = useLocalStorage(\n    \"html\",\n    `<div class=\"dss-alert dss-alert-informative\">\n    <div class=\"dss-alert-icon\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" color=\"#171717\">\n        <rect x=\"4.75\" y=\"4.75\" width=\"14.3581\" height=\"14.3581\" stroke=\"#171717\" stroke-width=\"1.5\"></rect>\n        <path d=\"M5.5 5.5L18.3615 18.3615\" stroke=\"#171717\" stroke-width=\"1.5\"></path>\n        <path d=\"M18.3563 5.5L5.5 18.3563\" stroke=\"#171717\" stroke-width=\"1.5\"></path>\n      </svg>\n    </div>\n    <div class=\"dss-alert-msg-container dis-ml-4 dss-alert-action-footer\">\n      <h6 class=\"dss-alert-msg dss-heading-xs\">Informative</h6>\n      <p class=\"dss-body-strong-sm-medium dss-alert-msg \">This is an info alert. It also has longer text to see what these alerts can look like when broken into multiple lines. This one will definitely break into multiple lines in most standard screen resolutions.</p>\n    </div>\n    <div class=\"d-flex dss-alert-btn-group\">\n      <button class=\"dss-btn dss-btn-primary dss-btn-sm \" type=\"button\">Button</button>\n      <button class=\"dss-btn dss-btn-outlined dss-btn-sm \" type=\"button\">Button</button>\n    </div>\n    <span class=\"dss-alert-close-icon\">\n      <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6.66484 1.33667L1.33855 6.6612\" stroke=\"#434343\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path>\n        <path d=\"M6.66666 6.66671L1.33333 1.33337\" stroke=\"#434343\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path>\n      </svg>\n    </span>\n  </div>`\n  );\n  const [css, setCss] = useLocalStorage(\"css\", \"h1 { color: red; }\");\n  const [js, setJs] = useLocalStorage(\"js\", \"console.log('Hello, world!');\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `);\n    }, 250);\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}